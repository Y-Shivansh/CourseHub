version: '3.8'

services:

  # --- Development Services (activated with --profile dev) ---
  server-dev:
    # This service defines your backend server for local development.
    # It will use the Dockerfile in your 'server' directory to build its image.
    build:
      context: ./server # specifies the path to the directory containing the Dockerfile and application code.
      dockerfile: Dockerfile # specifies the name of the Dockerfile to use within the context.
    container_name: coursehub-server-dev
    profiles: [ "dev" ]
    restart: unless-stopped
    ports:
      - "3000:3000"
      # Maps port 3000 on your host machine to port 3000 inside the container.
      # This allows you to access your backend API from your local machine at http://localhost:3000.
    environment:
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET = ${JWT_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    volumes:
      # This section defines bind mounts, which link directories on your host to directories in the container.
      - ./server:/app
      # Mounts local 'server' directory into '/app' inside the container.
      # This enables hot-reloading: changes on your host machine are immediately reflected in the container.
      - /app/node_modules
      # This creates an anonymous volume specifically for node_modules.    
      # This prevents your host's node_modules from being mounted over, ensuring the container uses its own installed dependencies.
      - ./server/public/temp:/app/public/temp
    networks:
      - coursehub-network # Connects this service to the 'coursehub-network', allowing it to communicate with other services on the same network.
    command: npm run dev

  client-dev:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: coursehub-client-dev
    profiles: [ "dev" ]
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000
      - VITE_RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - VITE_AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - VITE_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
    volumes:
      # Bind mounts for the frontend, enabling hot-reloading.
      - ./client:/app # Mounts your local 'client' directory into '/app' inside the container.
      - /app/node_modules # Anonymous volume for node_modules, ensuring container uses its own dependencies.
    depends_on:
      - server-dev # Ensures the backend 'server-dev' starts before 'client-dev'.
    networks:
      - coursehub-network # Connects this service to the shared network.
    command: npm run dev -- --host 0.0.0.0  # Overrides the default command. '-- --host 0.0.0.0' is necessary for Vite to be accessible from outside the container.
  
  
  #--- Production Services (activated with --profile prod) ---
  server: 
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: coursehub-server-prod
    profiles: ["prod"]
    restart: unless-stopped # Ensures the server restarts if it crashes or the host reboots.
    ports:
      - "3000:3000" # Maps port 3000 on your EC2 instance to port 3000 inside the container.
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    networks:
      - coursehub-network
    healthcheck: # Defines how Docker should check if your application inside the container is still running correctly.
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] # The '-f' flag ensures curl returns an error code on HTTP errors.
      interval: 1m
      timeout: 20s # Waits up to 10 seconds for a response.
      retries: 3 # If the healthcheck fails 3 consecutive times, Docker considers the container 'unhealthy'.
      start_period: 50s # Gives the container 40 seconds to start up before starting health checks.
    command: npm start

# --- Shared Resources ---
networks:  # This section defines shared networks that services can use to communicate with each other.
  coursehub-network: 
    driver: bridge     # Creates a default bridge network. Services on this network can find each other by their service names.
